{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _classCallCheck from \"/Users/april/goodjob/goodjob-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/april/goodjob/goodjob-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/april/goodjob/goodjob-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/april/goodjob/goodjob-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/april/goodjob/goodjob-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/april/goodjob/goodjob-app/src/components/Register.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nexport var RegistrationForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistrationForm, _React$Component);\n\n  function RegistrationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegistrationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegistrationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values); // send request\n          // fetch(`${API_ROOT}/signup`, {\n          //     method: 'POST',\n          //     body: JSON.stringify({\n          //         username: values.username,\n          //         password: values.password,\n          //     }),\n          // }).then((response) => {\n          //     if (response.ok) {\n          //         return response.text();\n          //     }\n          //     throw new Error(response.statusText);\n          // }).then((data) => {\n          //         console.log(data);\n          //         message.success('Registration Succeed!');\n          //         this.props.history.push('/login');\n          // })\n          // .catch((e) => {\n          //     console.log(e);\n          //     message.error('Registration Failed.');\n          // });\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    return _this;\n  }\n\n  _createClass(RegistrationForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"register\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        onSubmit: this.handleSubmit,\n        className: \"register\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(_Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), getFieldDecorator('username', {\n        rules: [{\n          required: true,\n          message: 'Please input your username!'\n        }]\n      })(React.createElement(_Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(_Input, {\n        type: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(_Input, {\n        type: \"password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Register\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"I already have an account, go back to \", React.createElement(Link, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"login\"), \"\\u2029\"))));\n    }\n  }]);\n\n  return RegistrationForm;\n}(React.Component);\nexport var Register = _Form.create({\n  name: 'register'\n})(RegistrationForm);","map":{"version":3,"sources":["/Users/april/goodjob/goodjob-app/src/components/Register.js"],"names":["React","Link","RegistrationForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","formItemLayout","getFieldDecorator","rules","required","message","validator","tailFormItemLayout","Component","Register","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom'\n\nexport class RegistrationForm extends React.Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n          if (!err) {\n              console.log('Received values of form: ', values);\n              // send request\n              // fetch(`${API_ROOT}/signup`, {\n              //     method: 'POST',\n              //     body: JSON.stringify({\n              //         username: values.username,\n              //         password: values.password,\n              //     }),\n              // }).then((response) => {\n              //     if (response.ok) {\n              //         return response.text();\n              //     }\n              //     throw new Error(response.statusText);\n              // }).then((data) => {\n              //         console.log(data);\n              //         message.success('Registration Succeed!');\n              //         this.props.history.push('/login');\n              // })\n              // .catch((e) => {\n              //     console.log(e);\n              //     message.error('Registration Failed.');\n              // });\n          }\n      });\n    }\n\n    handleConfirmBlur = (e) => {\n      const value = e.target.value;\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    }\n\n    compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      if (value && value !== form.getFieldValue('password')) {\n          callback('Two passwords that you enter is inconsistent!');\n      } else {\n          callback();\n      }\n    }\n\n    validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      if (value && this.state.confirmDirty) {\n          form.validateFields(['confirm'], { force: true });\n      }\n      callback();\n    }\n    render() {\n      return (\n        <div className=\"register\">\n          <Form onSubmit={this.handleSubmit} className=\"register\">\n                <Form.Item\n                    {...formItemLayout}\n                    label=\"Username\"\n                >\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    {...formItemLayout}\n                    label=\"Password\"\n                >\n                    {getFieldDecorator('password', {\n                        rules: [{\n                            required: true, message: 'Please input your password!',\n                        }, {\n                            validator: this.validateToNextPassword,\n                        }],\n                    })(\n                        <Input type=\"password\" />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    {...formItemLayout}\n                    label=\"Confirm Password\"\n                >\n                    {getFieldDecorator('confirm', {\n                        rules: [{\n                            required: true, message: 'Please confirm your password!',\n                        }, {\n                            validator: this.compareToFirstPassword,\n                        }],\n                    })(\n                        <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n                    )}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link> </p>\n                </Form.Item>\n            </Form>\n        </div>\n      );\n    }\n}\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\n"]},"metadata":{},"sourceType":"module"}